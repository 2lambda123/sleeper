# A unique name identifying this table.
sleeper.table.name=example-table

# A JSON file containing the schema for this table.
sleeper.table.schema.file=example/full/schema.json

# Whether or not to encrypt the table. If set to "true", all data at rest will be encrypted.
sleeper.table.encrypted=true

# The size of the row group in the Parquet files - defaults to the value in the instance properties.
sleeper.table.rowgroup.size=8388608

# The size of the page in the Parquet files - defaults to the value in the instance properties.
sleeper.table.page.size=131072

# The S3 readahead range - defaults to the value in the instance properties.
sleeper.table.fs.s3a.readahead.range=64K

# The compression codec to use for this table. Defaults to the value in the instance properties.
sleeper.table.compression.codec=ZSTD

# Fully qualified class of a custom iterator to use when iterating over the values in this table.
# Defaults to nothing.
sleeper.table.iterator.class.name=sleeper.core.iterator.impl.AgeOffIterator

# Iterator configuration. An iterator will be initialised with the following configuration.
sleeper.table.iterator.config=b,3600000

# Splits file which will be used to initialise the partitions for this table. Defaults to nothing and the
# table will be created with a single root partition.
sleeper.table.splits.file=example/full/splits.txt

# Flag to set if you have base64 encoded the split points (only used for string key types and defaults to false).
sleeper.table.splits.base64.encoded=false

# A file will not be deleted until this number of seconds have passed after it has been marked as ready for
# garbage collection. The reason for not deleting files immediately after they have been marked as ready for
# garbage collection is that they may still be in use by queries. Defaults to the value set in the instance
# properties.
sleeper.table.gc.delay.seconds=900

# The name of the class that defines how compaction jobs should be created.
# This should implement sleeper.compaction.strategy.CompactionStrategy. Defaults to the strategy used by the whole
# instance (set in the instance properties).
sleeper.table.compaction.strategy.class=sleeper.compaction.jobcreation.SizeRatioCompactionStrategy

# The minimum number of files to read in a compaction job. Note that the state store
# must support atomic updates for this many files. For the DynamoDBStateStore this
# is 11.
# (NB This does not apply to splitting jobs which will run even if there is only 1 file.)
sleeper.table.compaction.files.batch.size=11

# Partitions in this table with more than the following number of records in will be split/
sleeper.default.partition.splitting.threshold=1000000000

# The name of the class used for the metadata store. The default is DynamoDBStateStore. An alternative option is
# the S3StateStore.
sleeper.table.statestore.classname=sleeper.statestore.dynamodb.DynamoDBStateStore

# (EMR mode only) The EMR release label to be used when creating an EMR cluster for bulk importing data
# using Spark running on EMR. This value overrides the default value in the instance properties. It can
# be overridden by a value in the bulk import job specification.
sleeper.table.bulk.import.emr.release.label=emr-6.8.0

# (EMR mode only) The EC2 instance type to be used for the master node of the EMR cluster. This value
# overrides the default value in the instance properties. It can be overridden by a value in the bulk
# import job specification.
sleeper.table.bulk.import.emr.master.instance.type=m5.xlarge

# (EMR mode only) The EC2 instance type to be used for the executor nodes of the EMR cluster. This value
# overrides the default value in the instance properties. It can be overridden by a value in the bulk
# import job specification.
sleeper.table.bulk.import.emr.executor.instance.type=m5.4xlarge

# (EMR mode only) The initial number of EC2 instances to be used as executors in the EMR cluster. This value
# overrides the default value in the instance properties. It can be overridden by a value in the bulk
# import job specification.
sleeper.table.bulk.import.emr.executor.initial.instances=2

# (EMR mode only) The maximum number of EC2 instances to be used as executors in the EMR cluster. This value
# overrides the default value in the instance properties. It can be overridden by a value in the bulk
# import job specification.
sleeper.table.bulk.import.emr.executor.max.instances=10

# Used by the SizeRatioCompactionStrategy to decide if a group of files should be compacted.
# If the file sizes are s_1, ..., s_n then the files are compacted if s_1 + ... + s_{n-1} >= ratio * s_n
sleeper.table.compaction.strategy.sizeratio.ratio=3

# Used by the SizeRatioCompactionStrategy to control the maximum number of jobs that can be running
# concurrently per partition.
sleeper.table.compaction.strategy.sizeratio.max.concurrent.jobs.per.partition=2147483647

# This specifies whether point in time recovery is enabled for DynanmoDB tables if
# the DynamoDBStateStore is used.
sleeper.table.metadata.dynamo.pointintimerecovery=false

# This specifies whether queries and scans against DynamoDB tables used in the DynamoDB state store
# are strongly consistent.
sleeper.table.metadata.dynamo.consistent.reads=false
